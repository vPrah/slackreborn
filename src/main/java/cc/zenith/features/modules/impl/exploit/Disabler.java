package cc.zenith.features.modules.impl.exploit;

import cc.zenith.events.impl.network.PacketEvent;
import cc.zenith.events.impl.player.MoveEvent;
import cc.zenith.events.impl.player.UpdateEvent;
import cc.zenith.features.modules.api.settings.impl.BooleanValue;
import cc.zenith.features.modules.api.settings.impl.ModeValue;
import cc.zenith.features.modules.impl.exploit.disablers.IDisabler;
import cc.zenith.features.modules.impl.exploit.disablers.verus.UniversocraftDisabler;
import cc.zenith.features.modules.impl.exploit.disablers.verus.VerusReachDisabler;
import cc.zenith.features.modules.api.Category;
import cc.zenith.features.modules.api.Module;
import cc.zenith.features.modules.api.ModuleInfo;
import cc.zenith.utils.client.mc;
import cc.zenith.utils.network.PacketUtil;
import io.github.nevalackin.radbus.Listen;
import net.minecraft.network.play.client.*;

@ModuleInfo(
        name = "Disabler",
        category = Category.EXPLOIT
)
public class Disabler extends Module {

    private final ModeValue<IDisabler> mode = new ModeValue<>(new IDisabler[]{new UniversocraftDisabler(), new VerusReachDisabler()});
    private final BooleanValue verusscaffold = new BooleanValue("Verus Scaffold Check", false);
    private final BooleanValue verusomnisprint = new BooleanValue("Verus OmniSprint Check", false);
    private final BooleanValue vulcansprint = new BooleanValue("Vulcan Scaffold Sprint Check", false);
    private final BooleanValue vulcanlimit = new BooleanValue("Vulcan Scaffold Limit Check", false);
    private final BooleanValue spectator = new BooleanValue("Spectator Spoof", false);
    private final BooleanValue riding = new BooleanValue("Riding Spoof", false);

    public Disabler() {
        super();
        addSettings(mode, verusscaffold, verusomnisprint, vulcansprint, vulcanlimit, spectator, riding);
    }

    @Override
    public void onEnable() {
        mode.getValue().onEnable();
        if (verusomnisprint.getValue() && mc.getPlayer().isSprinting()) {
            PacketUtil.sendNoEvent(new C0BPacketEntityAction(mc.getPlayer(), C0BPacketEntityAction.Action.STOP_SPRINTING));
        }
    }

    @Override
    public void onDisable() {
        mode.getValue().onDisable();
    }

    @Listen
    public void onMove(MoveEvent event) {
        mode.getValue().onMove(event);
    }

    @Listen
    public void onUpdate(UpdateEvent event) {
        if (vulcanlimit.getValue()){
            PacketUtil.sendNoEvent(new C0BPacketEntityAction(mc.getPlayer(), C0BPacketEntityAction.Action.STOP_SNEAKING));
            PacketUtil.sendNoEvent(new C0BPacketEntityAction(mc.getPlayer(), C0BPacketEntityAction.Action.START_SNEAKING));
        }
        if (vulcansprint.getValue()) {
            PacketUtil.sendNoEvent(new C0BPacketEntityAction(mc.getPlayer(), C0BPacketEntityAction.Action.START_SNEAKING));
            PacketUtil.sendNoEvent(new C0BPacketEntityAction(mc.getPlayer(), C0BPacketEntityAction.Action.STOP_SPRINTING));
        }

        mode.getValue().onUpdate(event);
    }

    @Listen
    public void onPacket(PacketEvent event) {


        if (verusomnisprint.getValue() && event.getPacket() instanceof C0BPacketEntityAction) {
            event.cancel();
        }
        if (verusscaffold.getValue() && event.getPacket() instanceof C08PacketPlayerBlockPlacement) {
            ((C08PacketPlayerBlockPlacement) event.getPacket()).stack = null;
        }
        if (spectator.getValue() && event.getPacket() instanceof C03PacketPlayer){
            mc.getNetHandler().addToSendQueue(new C18PacketSpectate(mc.getPlayer().getUniqueID()));
        }
        if (riding.getValue() && event.getPacket() instanceof C03PacketPlayer) {
            mc.getNetHandler().addToSendQueue(new C0CPacketInput(mc.getPlayer().moveStrafing, mc.getPlayer().moveForward, mc.getPlayer().movementInput.jump, mc.getPlayer().movementInput.sneak));
        }
        mode.getValue().onPacket(event);
    }

}
