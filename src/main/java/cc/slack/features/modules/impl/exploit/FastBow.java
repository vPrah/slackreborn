package cc.slack.features.modules.impl.exploit;

import cc.slack.events.impl.player.UpdateEvent;
import cc.slack.features.modules.api.Category;
import cc.slack.features.modules.api.Module;
import cc.slack.features.modules.api.ModuleInfo;
import cc.slack.features.modules.api.settings.impl.ModeValue;
import io.github.nevalackin.radbus.Listen;
import net.minecraft.item.ItemBow;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C07PacketPlayerDigging;
import net.minecraft.util.BlockPos;
import net.minecraft.util.EnumFacing;

@ModuleInfo(
        name = "FastBow",
        category = Category.EXPLOIT
)
public class FastBow extends Module {

    private final ModeValue<String> mode = new ModeValue<>(new String[]{"Vanilla"});
    // Display
    private final ModeValue<String> displayMode = new ModeValue<>("Display", new String[]{"Simple", "Off"});

    public FastBow () {
        addSettings(mode, displayMode);
    }


    @Listen
    public void onUpdate (UpdateEvent event) {
        switch (mode.getValue()) {
            case "Vanilla":
                if (mc.thePlayer.getHealth() > 0.0f && (mc.thePlayer.onGround || mc.thePlayer.capabilities.isCreativeMode) && mc.thePlayer.inventory.getCurrentItem() != null && mc.thePlayer.inventory.getCurrentItem().getItem() instanceof ItemBow && mc.gameSettings.keyBindUseItem.pressed) {
                mc.playerController.sendUseItem(mc.thePlayer, mc.getWorld(), mc.thePlayer.inventory.getCurrentItem());
                mc.thePlayer.inventory.getCurrentItem().getItem().onItemRightClick(mc.thePlayer.inventory.getCurrentItem(), mc.getWorld(), mc.thePlayer);
                for (int i = 0; i < 20; ++i) {
                    mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer(false));
                }
                mc.getNetHandler().addToSendQueue(new C07PacketPlayerDigging(C07PacketPlayerDigging.Action.RELEASE_USE_ITEM, new BlockPos(0, 0, 0), EnumFacing.DOWN));
                mc.thePlayer.inventory.getCurrentItem().getItem().onPlayerStoppedUsing(mc.thePlayer.inventory.getCurrentItem(), mc.getWorld(), mc.thePlayer, 0);
            }
            break;
        }

    }

    @Override
    public String getMode() {
        switch (displayMode.getValue()) {
            case "Simple":
                return mode.getValue().toString();
        }
        return null;
    }

}
