// Slack Client (discord.gg/slackclient)

package cc.slack.features.modules.impl.exploit;

import cc.slack.events.impl.network.PacketEvent;
import cc.slack.events.impl.player.MoveEvent;
import cc.slack.events.impl.player.UpdateEvent;
import cc.slack.events.impl.player.WorldEvent;
import cc.slack.features.modules.api.settings.impl.BooleanValue;
import cc.slack.features.modules.api.settings.impl.ModeValue;
import cc.slack.features.modules.impl.exploit.disablers.IDisabler;
import cc.slack.features.modules.impl.exploit.disablers.verus.VerusReachDisabler;
import cc.slack.features.modules.api.Category;
import cc.slack.features.modules.api.Module;
import cc.slack.features.modules.api.ModuleInfo;
import cc.slack.features.modules.impl.exploit.disablers.vulcan.VulcanReachDisabler;
import cc.slack.utils.client.mc;
import cc.slack.utils.network.PacketUtil;
import io.github.nevalackin.radbus.Listen;
import net.minecraft.network.play.client.*;
import net.minecraft.network.Packet;

import java.util.Objects;

@ModuleInfo(
        name = "Disabler",
        category = Category.EXPLOIT
)
public class Disabler extends Module {

    private final ModeValue<IDisabler> mode = new ModeValue<>(new IDisabler[]{new VerusReachDisabler(), new VulcanReachDisabler()});
    private final BooleanValue verusScaffold = new BooleanValue("Verus Scaffold Check", false);
    private final BooleanValue verusOmniSprint = new BooleanValue("Verus OmniSprint Check", false);
    private final BooleanValue vulcanSprint = new BooleanValue("Vulcan Sprint Check", false);
    private final BooleanValue vulcanLimit = new BooleanValue("Vulcan Scaffold Limit Check", false);
    private final BooleanValue spectator = new BooleanValue("Spectator Spoof", false);
    private final BooleanValue riding = new BooleanValue("Riding Spoof", false);

    public Disabler() {
        super();
        addSettings(mode, verusScaffold, verusOmniSprint, vulcanSprint, vulcanLimit, spectator, riding);
    }


    @Override
    public void onEnable() {
        mode.getValue().onEnable();
        if (verusOmniSprint.getValue() && mc.getPlayer().isSprinting()) {
            PacketUtil.sendNoEvent(new C0BPacketEntityAction(mc.getPlayer(), C0BPacketEntityAction.Action.STOP_SPRINTING));
        }
    }

    @Override
    public void onDisable() {
        mode.getValue().onDisable();
    }

    @Listen
    public void onMove(MoveEvent event) {
        mode.getValue().onMove(event);
    }

    @Listen
    public void onUpdate(UpdateEvent event) {
        if (vulcanLimit.getValue()){
            if (mc.getPlayer().ticksExisted % 10 == 0)
                PacketUtil.sendNoEvent(new C0BPacketEntityAction(mc.getPlayer(), C0BPacketEntityAction.Action.STOP_SNEAKING));
            if (mc.getPlayer().ticksExisted % 10 == 1)
                PacketUtil.sendNoEvent(new C0BPacketEntityAction(mc.getPlayer(), C0BPacketEntityAction.Action.START_SNEAKING));
        }
        mode.getValue().onUpdate(event);
    }

    @Listen
    public void onWorld (WorldEvent event) {
        mode.getValue().onWorld(event);
    }

    @Listen
    public void onPacket(PacketEvent event) {
        final Packet packet = event.getPacket();
        
        if (vulcanSprint.getValue() && packet instanceof C0BPacketEntityAction) {
            if (((C0BPacketEntityAction) packet).getAction() == C0BPacketEntityAction.Action.START_SPRINTING ||  ((C0BPacketEntityAction) packet).getAction() == C0BPacketEntityAction.Action.STOP_SPRINTING) {
                event.cancel();
            }
        }
        if (verusOmniSprint.getValue() && packet instanceof C0BPacketEntityAction) {
            event.cancel();
        }
        if (verusScaffold.getValue() && packet instanceof C08PacketPlayerBlockPlacement) {
            ((C08PacketPlayerBlockPlacement) packet).stack = null;
        }
        if (spectator.getValue() && packet instanceof C03PacketPlayer){
            mc.getNetHandler().addToSendQueue(new C18PacketSpectate(mc.getPlayer().getUniqueID()));
        }
        if (riding.getValue() && packet instanceof C03PacketPlayer) {
            mc.getNetHandler().addToSendQueue(new C0CPacketInput(mc.getPlayer().moveStrafing, mc.getPlayer().moveForward, mc.getPlayer().movementInput.jump, mc.getPlayer().movementInput.sneak));
        }
        mode.getValue().onPacket(event);
    }

}
